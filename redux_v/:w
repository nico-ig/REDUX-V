module redux_v #(
  parameter integer BITS = 8,
  parameter integer OP = 4,
  parameter integer ULA_OP = 3,
  parameter integer REG_BITS = 2,
  parameter integer REG_SIZE = 4,
  parameter integer MEMORY_BITS = 8,
  parameter integer MEMORY_SIZE = 256
) (
  input clk
);

pc #(.BITS(`BITS)) PC (.next_pc(next_pc), .pc(pc));
instruction_memory #(.MEMORY_BITS(`MEMORY_BITS)) IM (.clk(clk), .pc(pc), .instruction(instrucion));
reg_bank #(.BITS(`BITS), .REG_BITS(`REG_BITS), .REG_SIZE(`REG_SIZE)) RB (.clk(clk), .write_enable(write_enable_reg), .address_a(address_a), .address_b(address_b), .write_address(write_address), .write_data(write_data), .data_a(data_a), .data_b(data_b));
data_memory #(.MEMORY_BITS(`MEMORY_BITS), .MEMORY_SIZE(`MEMORY_SIZE)) DM (.clk(clk), .write_enable(write_enable_dm), .address(address), .data_in(data_in), .data_out(data_out));
ula #(.ULA_OP(`ULA_OP), .BITS(`BITS)) ULA (.ula_op_in(ula_op), .a_in(a_in), b_in(b_in), .result_out(result_out));
sp #() SP ();
control_unit #() CU ();

endmodule
